// Justin Tan
// October 29, 2018
// Professor Pham
// Chapter 8 and 9 Lab
// This program 
#include "pch.h"
#include <iostream>
#include <iomanip>
using namespace std;



// Function prototypes
void sort(double*, int);
double averageDropLowest(double*, int);

int main()
{
	int numTestScores = 0; // To hold the number of test scores
	double *pointer = nullptr; // To point to the dynamically allocated array
	double testAverage = 0; // To hold the test score average

	// TODO: Get the number of test scores and validate the number of scores
	cout << "\nHow many test scores will you enter? ";
	cin >> numTestScores;

	// TODO: Allocate an array to hold the test scores.
	pointer = new double[numTestScores];

	// TODO: Get the test scores (i.e user enters numTestScores into pointer)
	cout << "Enter the test scores below.\n";
	for (int i = 0; i < numTestScores; i++)
	{
		cout << "Test Score " << (i + 1) << ": ";
		cin >> pointer[i];
	}

	// TODO: Sort the test scores.
	sort(pointer, numTestScores);

	// TODO: Get the average of the test scores.
	testAverage = averageDropLowest(pointer, numTestScores);

	// TODO: Display the resulting data and average score
	cout << fixed << showpoint << setprecision(2);
	cout << "Average score is: " << testAverage << endl;

	// TODO: Free the dynamically-allocated memory.
	delete pointer;
	pointer = 0;

	return 0;
}

// ********************************************************
// The sort function performs a selection sort on the *
// array pointed to by the score parameter into ascending *
// order. The size parameter holds the number of elements.*
// ********************************************************
void sort(double* score, int size)
{
	// TODO: Selection sort of score
	int startScan, minIndex;
	double minValue; 

	for (startScan = 0; startScan < (size - 1); startScan++)
	{
		minIndex = startScan;
		minValue = *(score + startScan);
		for (int i = startScan + 1; i < size; i++)
		{
			if (*(score + i) < minValue)
			{
				minValue = *(score + i);
				minIndex = i;
			}
		}
	}
	*(score + minIndex) = *(score + startScan);
	*(score + startScan) = minValue;
}

// ********************************************************
// The averageDropLowest function calculates and returns *
// the average of the values stored in the array passed *
// into the scores parameter, with the lowest score *
// dropped. Because the array must already be sorted in *
// ascending order, the first element is not included in *
// the calculations. The parameter numScores holds the *
// number of elements in the array. *
// ********************************************************
double averageDropLowest(double* score, int numScores)
{
	double average = 0;

	// TODO: calculate and return the average of the values
	average = *score / numScores;

	return average; // Remember that you dropped one.
}
